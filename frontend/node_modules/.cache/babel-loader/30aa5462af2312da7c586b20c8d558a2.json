{"ast":null,"code":"import { connect } from 'react-redux';\nimport HomeComponent from './HomeComponent';\nimport { homeOperations } from './duck';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    email: state.home.email,\n    password: state.home.password,\n    isLoggedIn: state.home.isLoggedIn,\n    highscore: state.home.highscore,\n    leaderboard: state.home.leaderboard,\n    gamescore: state.home.gamescore,\n    sanity: state.home.sanity,\n    gameover: state.home.gameover\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setSanity: function setSanity(sanity) {\n      dispatch(homeOperations.setSanity(sanity));\n    },\n    setGameover: function setGameover(gameover) {\n      dispatch(homeOperations.setGameover(gameover));\n    },\n    setEmail: function setEmail(email) {\n      dispatch(homeOperations.setEmail(email));\n    },\n    setPassword: function setPassword(password) {\n      dispatch(homeOperations.setPassword(password));\n    },\n    setGamescore: function setGamescore(gamescore) {\n      dispatch(homeOperations.setGamescore(gamescore));\n    },\n    updateHighscore: function updateHighscore(email) {\n      dispatch(homeOperations.updateHighscore(email));\n    },\n    updateLeaderboard: function updateLeaderboard() {\n      dispatch(homeOperations.updateLeaderboard());\n    },\n    sendGamescore: function sendGamescore(email, gamescore) {\n      dispatch(homeOperations.sendGamescore(email, gamescore));\n    },\n    login: function login(email, password) {\n      dispatch(homeOperations.login(email, password));\n    },\n    createAccount: function createAccount(email, password) {\n      dispatch(homeOperations.createAccount(email, password));\n    }\n  };\n};\n\nvar HomeContainer = connect(mapStateToProps, mapDispatchToProps)(HomeComponent);\nexport default HomeContainer;","map":{"version":3,"sources":["/Users/NicolasImhoff/Documents/GitHub/Recycle-Game/frontend/src/app/home/HomeContainer.js"],"names":["connect","HomeComponent","homeOperations","mapStateToProps","state","email","home","password","isLoggedIn","highscore","leaderboard","gamescore","sanity","gameover","mapDispatchToProps","dispatch","setSanity","setGameover","setEmail","setPassword","setGamescore","updateHighscore","updateLeaderboard","sendGamescore","login","createAccount","HomeContainer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,QAA/B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCC,IAAAA,KAAK,EAAED,KAAK,CAACE,IAAN,CAAWD,KADc;AAEhCE,IAAAA,QAAQ,EAAEH,KAAK,CAACE,IAAN,CAAWC,QAFW;AAGhCC,IAAAA,UAAU,EAAEJ,KAAK,CAACE,IAAN,CAAWE,UAHS;AAIhCC,IAAAA,SAAS,EAAEL,KAAK,CAACE,IAAN,CAAWG,SAJU;AAKhCC,IAAAA,WAAW,EAAEN,KAAK,CAACE,IAAN,CAAWI,WALQ;AAMhCC,IAAAA,SAAS,EAAEP,KAAK,CAACE,IAAN,CAAWK,SANU;AAOhCC,IAAAA,MAAM,EAAER,KAAK,CAACE,IAAN,CAAWM,MAPa;AAQhCC,IAAAA,QAAQ,EAAET,KAAK,CAACE,IAAN,CAAWO;AARW,GAAL;AAAA,CAA7B;;AAWA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtCC,IAAAA,SAAS,EAAE,mBAAAJ,MAAM,EAAI;AACnBG,MAAAA,QAAQ,CAACb,cAAc,CAACc,SAAf,CAAyBJ,MAAzB,CAAD,CAAR;AACD,KAHqC;AAItCK,IAAAA,WAAW,EAAE,qBAAAJ,QAAQ,EAAI;AACvBE,MAAAA,QAAQ,CAACb,cAAc,CAACe,WAAf,CAA2BJ,QAA3B,CAAD,CAAR;AACD,KANqC;AAOtCK,IAAAA,QAAQ,EAAE,kBAAAb,KAAK,EAAI;AACjBU,MAAAA,QAAQ,CAACb,cAAc,CAACgB,QAAf,CAAwBb,KAAxB,CAAD,CAAR;AACD,KATqC;AAUtCc,IAAAA,WAAW,EAAE,qBAAAZ,QAAQ,EAAI;AACvBQ,MAAAA,QAAQ,CAACb,cAAc,CAACiB,WAAf,CAA2BZ,QAA3B,CAAD,CAAR;AACD,KAZqC;AAatCa,IAAAA,YAAY,EAAE,sBAAAT,SAAS,EAAI;AACzBI,MAAAA,QAAQ,CAACb,cAAc,CAACkB,YAAf,CAA4BT,SAA5B,CAAD,CAAR;AACD,KAfqC;AAgBtCU,IAAAA,eAAe,EAAE,yBAAAhB,KAAK,EAAI;AACxBU,MAAAA,QAAQ,CAACb,cAAc,CAACmB,eAAf,CAA+BhB,KAA/B,CAAD,CAAR;AACD,KAlBqC;AAmBtCiB,IAAAA,iBAAiB,EAAE,6BAAM;AACvBP,MAAAA,QAAQ,CAACb,cAAc,CAACoB,iBAAf,EAAD,CAAR;AACD,KArBqC;AAsBtCC,IAAAA,aAAa,EAAE,uBAAClB,KAAD,EAAQM,SAAR,EAAsB;AACnCI,MAAAA,QAAQ,CAACb,cAAc,CAACqB,aAAf,CAA6BlB,KAA7B,EAAoCM,SAApC,CAAD,CAAR;AACD,KAxBqC;AAyBtCa,IAAAA,KAAK,EAAE,eAACnB,KAAD,EAAQE,QAAR,EAAqB;AAC1BQ,MAAAA,QAAQ,CAACb,cAAc,CAACsB,KAAf,CAAqBnB,KAArB,EAA4BE,QAA5B,CAAD,CAAR;AACD,KA3BqC;AA4BtCkB,IAAAA,aAAa,EAAE,uBAACpB,KAAD,EAAQE,QAAR,EAAqB;AAClCQ,MAAAA,QAAQ,CAACb,cAAc,CAACuB,aAAf,CAA6BpB,KAA7B,EAAoCE,QAApC,CAAD,CAAR;AACD;AA9BqC,GAAL;AAAA,CAAnC;;AAiCA,IAAMmB,aAAa,GAAG1B,OAAO,CAC3BG,eAD2B,EAE3BW,kBAF2B,CAAP,CAGpBb,aAHoB,CAAtB;AAKA,eAAeyB,aAAf","sourcesContent":["import { connect } from 'react-redux';\nimport HomeComponent from './HomeComponent';\nimport { homeOperations } from './duck';\n\nconst mapStateToProps = state => ({\n  email: state.home.email,\n  password: state.home.password,\n  isLoggedIn: state.home.isLoggedIn,\n  highscore: state.home.highscore,\n  leaderboard: state.home.leaderboard,\n  gamescore: state.home.gamescore,\n  sanity: state.home.sanity,\n  gameover: state.home.gameover\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setSanity: sanity => {\n    dispatch(homeOperations.setSanity(sanity));\n  },\n  setGameover: gameover => {\n    dispatch(homeOperations.setGameover(gameover));\n  },\n  setEmail: email => {\n    dispatch(homeOperations.setEmail(email));\n  },\n  setPassword: password => {\n    dispatch(homeOperations.setPassword(password));\n  },\n  setGamescore: gamescore => {\n    dispatch(homeOperations.setGamescore(gamescore));\n  },\n  updateHighscore: email => {\n    dispatch(homeOperations.updateHighscore(email));\n  },\n  updateLeaderboard: () => {\n    dispatch(homeOperations.updateLeaderboard());\n  },\n  sendGamescore: (email, gamescore) => {\n    dispatch(homeOperations.sendGamescore(email, gamescore));\n  },\n  login: (email, password) => {\n    dispatch(homeOperations.login(email, password));\n  },\n  createAccount: (email, password) => {\n    dispatch(homeOperations.createAccount(email, password));\n  }\n});\n\nconst HomeContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HomeComponent);\n\nexport default HomeContainer;"]},"metadata":{},"sourceType":"module"}