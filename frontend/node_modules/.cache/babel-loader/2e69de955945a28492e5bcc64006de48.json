{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    _again = false;\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        desc = parent = undefined;\n        continue _function;\n      }\n    } else if ('value' in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libFilter_props_from = require('./lib/filter_props_from');\n\nvar _libExtract_data_from = require('./lib/extract_data_from');\n\nvar _unsafe = require('./unsafe');\n\nvar _thead = require('./thead');\n\nvar _th = require('./th');\n\nvar _tr = require('./tr');\n\nvar _tfoot = require('./tfoot');\n\nvar _paginator = require('./paginator');\n\nvar Table = function (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table(props) {\n    _classCallCheck(this, Table);\n\n    _get(Object.getPrototypeOf(Table.prototype), 'constructor', this).call(this, props);\n\n    this.state = {\n      currentPage: this.props.currentPage ? this.props.currentPage : 0,\n      currentSort: {\n        column: null,\n        direction: this.props.defaultSortDescending ? -1 : 1\n      },\n      filter: ''\n    }; // Set the state of the current sort to the default sort\n\n    if (props.sortBy !== false || props.defaultSort !== false) {\n      var sortingColumn = props.sortBy || props.defaultSort;\n      this.state.currentSort = this.getCurrentSort(sortingColumn);\n    }\n  }\n\n  _createClass(Table, [{\n    key: 'filterBy',\n    value: function filterBy(filter) {\n      this.setState({\n        filter: filter\n      });\n    } // Translate a user defined column array to hold column objects if strings are specified\n    // (e.g. ['column1'] => [{key: 'column1', label: 'column1'}])\n\n  }, {\n    key: 'translateColumnsArray',\n    value: function translateColumnsArray(columns) {\n      return columns.map(function (column, i) {\n        if (typeof column === 'string') {\n          return {\n            key: column,\n            label: column\n          };\n        } else {\n          if (typeof column.sortable !== 'undefined') {\n            var sortFunction = column.sortable === true ? 'default' : column.sortable;\n            this._sortable[column.key] = sortFunction;\n          }\n\n          return column;\n        }\n      }.bind(this));\n    }\n  }, {\n    key: 'parseChildData',\n    value: function parseChildData(props) {\n      var data = [],\n          tfoot = undefined; // Transform any children back to a data array\n\n      if (typeof props.children !== 'undefined') {\n        _react2['default'].Children.forEach(props.children, function (child) {\n          if (typeof child === 'undefined' || child === null) {\n            return;\n          }\n\n          switch (\"\".concat(child.type)) {\n            case \"\".concat(_thead.Thead):\n              break;\n\n            case \"\".concat(_tfoot.Tfoot):\n              if (typeof tfoot !== 'undefined') {\n                console.warn('You can only have one <Tfoot>, but more than one was specified.' + 'Ignoring all but the last one');\n              }\n\n              tfoot = child;\n              break;\n\n            case \"\".concat(_tr.Tr):\n              var childData = child.props.data || {};\n\n              _react2['default'].Children.forEach(child.props.children, function (descendant) {\n                // TODO\n\n                /* if (descendant.type.ConvenienceConstructor === Td) { */\n                if (typeof descendant !== 'object' || descendant == null) {\n                  return;\n                } else if (typeof descendant.props.column !== 'undefined') {\n                  var value = undefined;\n\n                  if (typeof descendant.props.data !== 'undefined') {\n                    value = descendant.props.data;\n                  } else if (typeof descendant.props.children !== 'undefined') {\n                    value = descendant.props.children;\n                  } else {\n                    console.warn('exports.Td specified without ' + 'a `data` property or children, ' + 'ignoring');\n                    return;\n                  }\n\n                  childData[descendant.props.column] = {\n                    value: value,\n                    props: (0, _libFilter_props_from.filterPropsFrom)(descendant.props),\n                    __reactableMeta: true\n                  };\n                } else {\n                  console.warn('exports.Td specified without a ' + '`column` property, ignoring');\n                }\n              });\n\n              data.push({\n                data: childData,\n                props: (0, _libFilter_props_from.filterPropsFrom)(child.props),\n                __reactableMeta: true\n              });\n              break;\n\n            default:\n              console.warn('The only possible children of <Table> are <Thead>, <Tr>, ' + 'or one <Tfoot>.');\n          }\n        }.bind(this));\n      }\n\n      return {\n        data: data,\n        tfoot: tfoot\n      };\n    }\n  }, {\n    key: 'initialize',\n    value: function initialize(props) {\n      this.data = props.data || [];\n\n      var _parseChildData = this.parseChildData(props);\n\n      var data = _parseChildData.data;\n      var tfoot = _parseChildData.tfoot;\n      this.data = this.data.concat(data);\n      this.tfoot = tfoot;\n      this.initializeSorts(props);\n      this.initializeFilters(props);\n    }\n  }, {\n    key: 'initializeFilters',\n    value: function initializeFilters(props) {\n      this._filterable = {}; // Transform filterable properties into a more friendly list\n\n      for (var i in props.filterable) {\n        var column = props.filterable[i];\n        var columnName = undefined,\n            filterFunction = undefined;\n\n        if (column instanceof Object) {\n          if (typeof column.column !== 'undefined') {\n            columnName = column.column;\n          } else {\n            console.warn('Filterable column specified without column name');\n            continue;\n          }\n\n          if (typeof column.filterFunction === 'function') {\n            filterFunction = column.filterFunction;\n          } else {\n            filterFunction = 'default';\n          }\n        } else {\n          columnName = column;\n          filterFunction = 'default';\n        }\n\n        this._filterable[columnName] = filterFunction;\n      }\n    }\n  }, {\n    key: 'initializeSorts',\n    value: function initializeSorts(props) {\n      this._sortable = {}; // Transform sortable properties into a more friendly list\n\n      for (var i in props.sortable) {\n        var column = props.sortable[i];\n        var columnName = undefined,\n            sortFunction = undefined;\n\n        if (column instanceof Object) {\n          if (typeof column.column !== 'undefined') {\n            columnName = column.column;\n          } else {\n            console.warn('Sortable column specified without column name');\n            return;\n          }\n\n          if (typeof column.sortFunction === 'function') {\n            sortFunction = column.sortFunction;\n          } else {\n            sortFunction = 'default';\n          }\n        } else {\n          columnName = column;\n          sortFunction = 'default';\n        }\n\n        this._sortable[columnName] = sortFunction;\n      }\n    }\n  }, {\n    key: 'getCurrentSort',\n    value: function getCurrentSort(column) {\n      var columnName = undefined,\n          sortDirection = undefined;\n\n      if (column instanceof Object) {\n        if (typeof column.column !== 'undefined') {\n          columnName = column.column;\n        } else {\n          console.warn('Default column specified without column name');\n          return;\n        }\n\n        if (typeof column.direction !== 'undefined') {\n          if (column.direction === 1 || column.direction === 'asc') {\n            sortDirection = 1;\n          } else if (column.direction === -1 || column.direction === 'desc') {\n            sortDirection = -1;\n          } else {\n            var defaultDirection = this.props.defaultSortDescending ? 'descending' : 'ascending';\n            console.warn('Invalid default sort specified. Defaulting to ' + defaultDirection);\n            sortDirection = this.props.defaultSortDescending ? -1 : 1;\n          }\n        } else {\n          sortDirection = this.props.defaultSortDescending ? -1 : 1;\n        }\n      } else {\n        columnName = column;\n        sortDirection = this.props.defaultSortDescending ? -1 : 1;\n      }\n\n      return {\n        column: columnName,\n        direction: sortDirection\n      };\n    }\n  }, {\n    key: 'updateCurrentSort',\n    value: function updateCurrentSort(sortBy) {\n      if (sortBy !== false && sortBy.column !== this.state.currentSort.column && sortBy.direction !== this.state.currentSort.direction) {\n        this.setState({\n          currentSort: this.getCurrentSort(sortBy)\n        });\n      }\n    }\n  }, {\n    key: 'updateCurrentPage',\n    value: function updateCurrentPage(nextPage) {\n      if (typeof nextPage !== 'undefined' && nextPage !== this.state.currentPage) {\n        this.setState({\n          currentPage: nextPage\n        });\n      }\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.initialize(this.props);\n      this.sortByCurrentSort();\n      this.filterBy(this.props.filterBy);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.initialize(nextProps);\n      this.updateCurrentPage(nextProps.currentPage);\n      this.updateCurrentSort(nextProps.sortBy);\n      this.sortByCurrentSort();\n      this.filterBy(nextProps.filterBy);\n    }\n  }, {\n    key: 'applyFilter',\n    value: function applyFilter(filter, children) {\n      // Helper function to apply filter text to a list of table rows\n      filter = filter.toLowerCase();\n      var matchedChildren = [];\n\n      for (var i = 0; i < children.length; i++) {\n        var data = children[i].props.data;\n\n        for (var filterColumn in this._filterable) {\n          if (typeof data[filterColumn] !== 'undefined') {\n            // Default filter\n            if (typeof this._filterable[filterColumn] === 'undefined' || this._filterable[filterColumn] === 'default') {\n              if ((0, _libExtract_data_from.extractDataFrom)(data, filterColumn).toString().toLowerCase().indexOf(filter) > -1) {\n                matchedChildren.push(children[i]);\n                break;\n              }\n            } else {\n              // Apply custom filter\n              if (this._filterable[filterColumn]((0, _libExtract_data_from.extractDataFrom)(data, filterColumn).toString(), filter)) {\n                matchedChildren.push(children[i]);\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      return matchedChildren;\n    }\n  }, {\n    key: 'sortByCurrentSort',\n    value: function sortByCurrentSort() {\n      // Apply a sort function according to the current sort in the state.\n      // This allows us to perform a default sort even on a non sortable column.\n      var currentSort = this.state.currentSort;\n\n      if (currentSort.column === null) {\n        return;\n      }\n\n      this.data.sort(function (a, b) {\n        var keyA = (0, _libExtract_data_from.extractDataFrom)(a, currentSort.column);\n        keyA = (0, _unsafe.isUnsafe)(keyA) ? keyA.toString() : keyA || '';\n        var keyB = (0, _libExtract_data_from.extractDataFrom)(b, currentSort.column);\n        keyB = (0, _unsafe.isUnsafe)(keyB) ? keyB.toString() : keyB || ''; // Default sort\n\n        if (typeof this._sortable[currentSort.column] === 'undefined' || this._sortable[currentSort.column] === 'default') {\n          // Reverse direction if we're doing a reverse sort\n          if (keyA < keyB) {\n            return -1 * currentSort.direction;\n          }\n\n          if (keyA > keyB) {\n            return 1 * currentSort.direction;\n          }\n\n          return 0;\n        } else {\n          // Reverse columns if we're doing a reverse sort\n          if (currentSort.direction === 1) {\n            return this._sortable[currentSort.column](keyA, keyB);\n          } else {\n            return this._sortable[currentSort.column](keyB, keyA);\n          }\n        }\n      }.bind(this));\n    }\n  }, {\n    key: 'onSort',\n    value: function onSort(column) {\n      // Don't perform sort on unsortable columns\n      if (typeof this._sortable[column] === 'undefined') {\n        return;\n      }\n\n      var currentSort = this.state.currentSort;\n\n      if (currentSort.column === column) {\n        currentSort.direction *= -1;\n      } else {\n        currentSort.column = column;\n        currentSort.direction = this.props.defaultSortDescending ? -1 : 1;\n      } // Set the current sort and pass it to the sort function\n\n\n      this.setState({\n        currentSort: currentSort\n      });\n      this.sortByCurrentSort();\n\n      if (typeof this.props.onSort === 'function') {\n        this.props.onSort(currentSort);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this = this;\n\n      var children = [];\n      var columns = undefined;\n      var userColumnsSpecified = false;\n      var showHeaders = typeof this.props.hideTableHeader === 'undefined';\n      var firstChild = null;\n\n      if (this.props.children) {\n        if (this.props.children.length > 0 && this.props.children[0] && this.props.children[0].type === _thead.Thead) {\n          firstChild = this.props.children[0];\n        } else if (this.props.children.type === _thead.Thead) {\n          firstChild = this.props.children;\n        }\n      }\n\n      if (firstChild !== null) {\n        columns = _thead.Thead.getColumns(firstChild);\n      } else {\n        columns = this.props.columns || [];\n      }\n\n      if (columns.length > 0) {\n        userColumnsSpecified = true;\n        columns = this.translateColumnsArray(columns);\n      } // Build up table rows\n\n\n      if (this.data && typeof this.data.map === 'function') {\n        // Build up the columns array\n        children = children.concat(this.data.map(function (rawData, i) {\n          var data = rawData;\n          var props = {};\n\n          if (rawData.__reactableMeta === true) {\n            data = rawData.data;\n            props = rawData.props;\n          } // Loop through the keys in each data row and build a td for it\n\n\n          for (var k in data) {\n            if (data.hasOwnProperty(k)) {\n              // Update the columns array with the data's keys if columns were not\n              // already specified\n              if (userColumnsSpecified === false) {\n                (function () {\n                  var column = {\n                    key: k,\n                    label: k\n                  }; // Only add a new column if it doesn't already exist in the columns array\n\n                  if (columns.find(function (element) {\n                    return element.key === column.key;\n                  }) === undefined) {\n                    columns.push(column);\n                  }\n                })();\n              }\n            }\n          }\n\n          return _react2['default'].createElement(_tr.Tr, _extends({\n            columns: columns,\n            key: i,\n            data: data\n          }, props));\n        }.bind(this)));\n      }\n\n      if (this.props.sortable === true) {\n        for (var i = 0; i < columns.length; i++) {\n          this._sortable[columns[i].key] = 'default';\n        }\n      } // Determine if we render the filter box\n\n\n      var filtering = false;\n\n      if (this.props.filterable && Array.isArray(this.props.filterable) && this.props.filterable.length > 0 && !this.props.hideFilterInput) {\n        filtering = true;\n      } // Apply filters\n\n\n      var filteredChildren = children;\n\n      if (this.state.filter !== '') {\n        filteredChildren = this.applyFilter(this.state.filter, filteredChildren);\n      } // Determine pagination properties and which columns to display\n\n\n      var itemsPerPage = 0;\n      var pagination = false;\n      var numPages = undefined;\n      var currentPage = this.state.currentPage;\n      var pageButtonLimit = this.props.pageButtonLimit || 10;\n      var currentChildren = filteredChildren;\n\n      if (this.props.itemsPerPage > 0) {\n        itemsPerPage = this.props.itemsPerPage;\n        numPages = Math.ceil(filteredChildren.length / itemsPerPage);\n\n        if (currentPage > numPages - 1) {\n          currentPage = numPages - 1;\n        }\n\n        pagination = true;\n        currentChildren = filteredChildren.slice(currentPage * itemsPerPage, (currentPage + 1) * itemsPerPage);\n      } // Manually transfer props\n\n\n      var props = (0, _libFilter_props_from.filterPropsFrom)(this.props);\n      var noDataText = this.props.noDataText ? _react2['default'].createElement('tr', {\n        className: 'reactable-no-data'\n      }, _react2['default'].createElement('td', {\n        colSpan: columns.length\n      }, this.props.noDataText)) : null;\n      var tableHeader = null;\n\n      if (columns && columns.length > 0 && showHeaders) {\n        tableHeader = _react2['default'].createElement(_thead.Thead, {\n          columns: columns,\n          filtering: filtering,\n          onFilter: function onFilter(filter) {\n            _this.setState({\n              filter: filter\n            });\n\n            if (_this.props.onFilter) {\n              _this.props.onFilter(filter);\n            }\n          },\n          filterPlaceholder: this.props.filterPlaceholder,\n          filterClassName: this.props.filterClassName,\n          currentFilter: this.state.filter,\n          sort: this.state.currentSort,\n          sortableColumns: this._sortable,\n          onSort: this.onSort.bind(this),\n          key: 'thead'\n        });\n      }\n\n      return _react2['default'].createElement('table', props, tableHeader, _react2['default'].createElement('tbody', {\n        className: 'reactable-data',\n        key: 'tbody'\n      }, currentChildren.length > 0 ? currentChildren : noDataText), pagination === true ? _react2['default'].createElement(_paginator.Paginator, {\n        colSpan: columns.length,\n        pageButtonLimit: pageButtonLimit,\n        numPages: numPages,\n        currentPage: currentPage,\n        onPageChange: function onPageChange(page) {\n          _this.setState({\n            currentPage: page\n          });\n\n          if (_this.props.onPageChange) {\n            _this.props.onPageChange(page);\n          }\n        },\n        previousPageLabel: this.props.previousPageLabel,\n        nextPageLabel: this.props.nextPageLabel,\n        key: 'paginator'\n      }) : null, this.tfoot);\n    }\n  }]);\n\n  return Table;\n}(_react2['default'].Component);\n\nexports.Table = Table;\nTable.defaultProps = {\n  sortBy: false,\n  defaultSort: false,\n  defaultSortDescending: false,\n  itemsPerPage: 0,\n  filterBy: '',\n  hideFilterInput: false\n};","map":null,"metadata":{},"sourceType":"script"}