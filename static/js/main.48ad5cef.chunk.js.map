{"version":3,"sources":["reducers.js","configureStore.js","serviceWorker.js","app/home/HomeComponent.jsx","app/home/index.js","app/home/HomeContainer.js","app/App.jsx","app/index.js","index.js"],"names":["rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Boolean","location","hostname","match","HomeComponent","react_default","a","createElement","React","Component","HomeContainer","connect","state","history","createHistory","App","react_router","exact","path","baseUrl","component","Home","store","createStore","applyMiddleware","thunk","jsx","es","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+LAOeA,EAJKC,YAAgB,ICC9BC,EAAmBC,OAAOC,sCAAwCC,ICQpDC,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,gICLSC,mLARX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCAJoBC,IAAMC,WCFnBC,ECMOC,YAJE,SAAAC,GAAK,MAAK,IAIZD,CAAyBP,GCDlCS,EAAUC,MCLRC,mLDWX,OACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQH,QAASA,GACfR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAMC,gBAAeC,UAAWC,aANrCZ,aEFZa,EPAUC,YACZ7B,EACAE,EAAiB4B,YAAgBC,OOD/BC,EACJrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAUL,MAAOA,GACfjB,EAAAC,EAAAC,cAACqB,EAAD,OAIJC,IAASC,OAAOJ,EAAKK,SAASC,eAAe,SNmHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48ad5cef.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n// import other reducers here\n\nconst rootReducer = combineReducers({\n  // list of reducers\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n  );\n\n  return store;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass HomeComponent extends React.Component {  \n  render() {\n    return (\n      <div>\n        <h1>Home Page!</h1>\n      </div>\n    );\n  }\n}\n\nexport default HomeComponent;","import HomeContainer from './HomeContainer';\nexport default HomeContainer;","import { connect } from 'react-redux';\nimport HomeComponent from './HomeComponent';\n\nconst mapStateToProps = state => ({\n  \n});\n\nconst HomeContainer = connect(mapStateToProps)(HomeComponent);\n\nexport default HomeContainer;","import React, { Component } from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport createHistory from 'history/createBrowserHistory';\n// add components here\nimport Home from './home';\n\nexport const history = createHistory();\nconst baseUrl = \"Recycle-Game\"; // will be /hypercomp\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router history={history}>\n        <div>\n          <Route exact path={baseUrl + \"/\"} component={Home} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","import App from './App';\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './configureStore';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app';\n\nconst store = configureStore();\nconst jsx = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(jsx, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}